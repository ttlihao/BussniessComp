import React, { useState } from "react";
import axios from "axios";
import { Form, Input, message, Modal } from "antd";
import "./ForgotPasswordPage.scss";
import { RiVerifiedBadgeFill } from "react-icons/ri";
import { useNavigate } from "react-router-dom";

function ForgotPasswordPage() {
  const navigate = useNavigate();
  const [step, setStep] = useState(1); // 1: Nh·∫≠p email, 2: Nh·∫≠p OTP, 3: ƒê·ªïi m·∫≠t kh·∫©u
  const [email, setEmail] = useState("");
  const [otp, setOtp] = useState("");
  const [isModalVisible, setIsModalVisible] = useState(false);

  // üîπ G·ª≠i email ƒë·ªÉ nh·∫≠n OTP
  const handleSendEmail = async (values) => {
    try {
      const response = await axios.post(
        "https://localhost:7240/api/authenticate/forgot-password",
        {
          email: values.email,
        }
      );
      if (response.status === 200) {
        message.success("ƒê√£ g·ª≠i OTP ƒë·∫øn email c·ªßa b·∫°n!");
        setEmail(values.email);
        setStep(2);
      }
    } catch (error) {
      message.error("L·ªói khi g·ª≠i email! Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  // üîπ X√°c minh OTP
  const handleVerifyOTP = async (values) => {
    try {
      const response = await axios.post(
        `https://localhost:7240/api/authenticate/verify-otp?email=${email}&otp=${values.otp}`
      );
      if (response.data.succeeded) {
        message.success("X√°c minh OTP th√†nh c√¥ng!");
        setOtp(values.otp);
        setStep(3);
      } else {
        message.error("M√£ OTP kh√¥ng ƒë√∫ng! Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      message.error("L·ªói khi x√°c minh OTP!");
    }
  };

  // üîπ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
  const handleResetPassword = async (values) => {
    try {
      const response = await axios.post(
        "https://localhost:7240/api/authenticate/reset-password",
        {
          email,
          otp,
          newPassword: values.password,
          confirmPassword: values.confirm,
        }
      );

      if (response.data.succeeded) {
        setIsModalVisible(true);

        setTimeout(() => {
          setIsModalVisible(false);
          navigate("/sign-in");
        }, 2000);
      }
    } catch (error) {
      message.error("L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u! Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div className="mt-[82px] fpp-container">
      {step === 1 && (
        <div className="fpp-wrapper">
          <h1>Qu√™n m·∫≠t kh·∫©u</h1>
          <p>Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</p>
          <Form
            name="forgot-pass-email"
            layout="vertical"
            onFinish={handleSendEmail}
          >
            <Form.Item
              name="email"
              className="form-custom"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
                { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
              ]}
            >
              <Input
                placeholder="Nh·∫≠p email"
                className="form-input"
                autoComplete="email"
              />
            </Form.Item>
            <Form.Item>
              <button type="submit" className="btn-custom mt-3">
                ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
              </button>
            </Form.Item>
          </Form>
        </div>
      )}

      {step === 2 && (
        <div className="fpp-wrapper">
          <h1>Ki·ªÉm tra Email</h1>
          <p>
            Ch√∫ng t√¥i ƒë√£ g·ª≠i li√™n k·∫øt ƒë·∫∑t l·∫°i ƒë·∫øn <b>{email}</b> <br />
            Nh·∫≠p m√£ 5 ch·ªØ s·ªë ƒë∆∞·ª£c g·ª≠i trong email
          </p>
          <Form
            name="forgot-pass-otp"
            layout="vertical"
            onFinish={handleVerifyOTP}
          >
            <Form.Item
              name="otp"
              className="form-custom"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p OTP!" }]}
            >
              <Input
                placeholder="Nh·∫≠p OTP"
                className="form-input"
                autoComplete="one-time-code"
              />
            </Form.Item>
            <Form.Item>
              <button type="submit" className="btn-custom mt-3">
                X√°c minh m√£
              </button>
            </Form.Item>
          </Form>
          <p>
            B·∫°n v·∫´n ch∆∞a nh·∫≠n ƒë∆∞·ª£c email?{" "}
            <a onClick={() => handleSendEmail({ email })}>G·ª≠i l·∫°i</a>
          </p>
        </div>
      )}

      {step === 3 && (
        <div className="fpp-wrapper">
          <h1>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi</h1>
          <p>
            T·∫°o m·∫≠t kh·∫©u m·ªõi. ƒê·∫£m b·∫£o m·∫≠t kh·∫©u n√†y kh√°c v·ªõi m·∫≠t kh·∫©u tr∆∞·ªõc ƒë√≥ ƒë·ªÉ
            b·∫£o m·∫≠t.
          </p>
          <Form
            name="forgot-pass-change"
            layout="vertical"
            onFinish={handleResetPassword}
          >
            <Form.Item
              name="password"
              className="form-custom"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" },
                { min: 8, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±!" },
                { max: 20, message: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 20 k√Ω t·ª±!" },
                {
                  pattern: /[A-Z]/,
                  message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ in hoa!",
                },
                {
                  pattern: /[a-z]/,
                  message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng!",
                },
                {
                  pattern: /\d/,
                  message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ s·ªë!",
                },
                {
                  pattern: /[\W_]/,
                  message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát!",
                },
              ]}
            >
              <Input.Password
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                className="form-input"
                autoComplete="new-password"
              />
            </Form.Item>

            <Form.Item
              name="confirm"
              className="form-custom"
              dependencies={["password"]}
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u!" },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || getFieldValue("password") === value) {
                      return Promise.resolve();
                    }
                    return Promise.reject(
                      new Error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                    );
                  },
                }),
              ]}
            >
              <Input.Password
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                className="form-input"
                autoComplete="new-password"
              />
            </Form.Item>

            <Form.Item>
              <button type="submit" className="btn-custom mt-3">
                C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
              </button>
            </Form.Item>
          </Form>
        </div>
      )}
      <Modal
        open={isModalVisible}
        footer={null}
        closable={false}
        centered
        zIndex={20}
        width={420}
        className="custom-modal"
      >
        <div className="modal-content">
          <RiVerifiedBadgeFill color="green" size={100} />
          <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!</h2>
          <p>
            Xin ch√∫c m·ª´ng! M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi. H·ªá th·ªëng s·∫Ω chuy·ªÉn
            trang trong gi√¢y l√°t...
          </p>
        </div>
      </Modal>
    </div>
  );
}

export default ForgotPasswordPage;
